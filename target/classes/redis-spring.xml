<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:p="http://www.springframework.org/schema/p"    
       xmlns:context="http://www.springframework.org/schema/context"  
       xmlns:mvc="http://www.springframework.org/schema/mvc"    
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/cache
            http://www.springframework.org/schema/cache/spring-cache.xsd
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 引入配置文件 -->
   <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:redis.properties</value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true" /> 
    </bean>


     <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
         <!--最大空闲数--> 
        <property name="maxIdle" value="${redis.pool.maxIdle}"/> 
        <property name="maxTotal" value="${redis.pool.maxTotal}"/>
        <!--最大建立连接等待时间-->  
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->  
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
        <property name="testOnReturn" value="${redis.pool.testOnReturn}"/>
    </bean>    
    
    <!-- *************************** -->
<!--多节点配置，配置RedisClusterConfiguration-->
    <bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="maxRedirects" value="6"></property>
        <property name="clusterNodes">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"/>
                    <constructor-arg name="port" value="9000"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"/>
                    <constructor-arg name="port" value="9001"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"/>
                    <constructor-arg name="port" value="9002"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"/>
                    <constructor-arg name="port" value="9003"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"/>
                    <constructor-arg name="port" value="9004"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"/>
                    <constructor-arg name="port" value="9005"/>
                </bean>
            </set>
        </property>
    </bean>
<!-- *************************** -->
    
    
     <!-- 连接池配置，类似数据库连接池 -->
     <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!--  这里注释的为单节点
        <property name="hostName" value="${redis.master.ip}"/> 
        <property name="port" value="${redis.master.port}"/> 
        -->   
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="clusterConfig" ref="redisClusterConfiguration"/>        
    </bean>
    <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->  
    <bean id="redisKeySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="redisValueSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
    <!-- spring data提供redis模板 --> 
      <!-- 在学习redis的时候，我们一般会用到spring data来将redis整合，我们需要用到配置文件，在过程中会出现redis的键乱码\ xac \ xed \ x00 \ x05t \ x00 \ tb！
      其实只要改变下配置文件，下面是全部配置文件，注掉的是会乱码的配置 -->    
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer" ref="redisKeySerializer"/>
        <property name="hashKeySerializer" ref="redisKeySerializer"/>
        <property name="valueSerializer" ref="redisValueSerializer"/>
        <property name="hashValueSerializer" ref="redisValueSerializer"/>
    </bean>
    
     <util:properties id="redisExpires" location="classpath:rediscustom.properties"/>
      
      <!-- 使用RedisCacheManger作为cachemange实现类 ,需要将下面的id=aaa改为id=CacheManager-->
      <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg index="0" ref="redisTemplate"/>
         <!-- 属性设置了全局的默认失效时间 
        <property name="defaultExpiration" value="600"/>
         -->
        <property name="usePrefix" value="true"/>
        <!-- expires属性则根据map指定的key单独设置失效时间  
        <property name="expires" ref="redisExpires"/>
        <property name="CacheNames" value="content"/>
        -->
        <!-- expires属性则根据map指定的key单独设置失效时间 -->
        <property name="expires">
            <map>
                <entry key="content" value="600"/>
                <entry key="hello" value="600"/>
            </map>
        </property>
         
                
    </bean>
    
    
    <!-- 使用（测试）simpleCacheManger作为cachemange实现类 ,需要将下面的id=aaa改为id=CacheManager-->
     <bean id="aaa" class="org.springframework.cache.support.SimpleCacheManager">    
         <property name="caches">    
            <set>    
                <!-- 这里可以配置多个redis -->  
                <bean class="com.song.redis.RedisCache">    
                     <property name="redisTemplate" ref="redisTemplate" />  
                      <!-- name对应的名称要在类或方法的注解中使用  -->
                     <property name="name" value="content"/>                       
                </bean> 
                <!-- 这里可以配置多个redis  
                <bean class="com.song.redis.RedisCache">
                     <property name="redisTemplate" ref="redisTemplate" />                    
                     <property name="name" value="hello"/>
                </bean>
                --> 
            </set>    
         </property>    
     </bean>    
      
   <!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->    
   <!--启用 cache 注解-->
    <cache:annotation-driven cache-manager="cacheManager" proxy-target-class="true"/>
     
</beans>